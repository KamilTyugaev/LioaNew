//
//  main.swift
//  lio4Swift
//
//  Created by a on 21.11.2021.
//


import Foundation

//extension Array where Element == Int {
//static func generateRandom(size: Int) -> [Int] {
//guard size > 0 else { return [Int]() }
//return Array(0..<size).shuffled() }
//}

//var array = [Int].generateRandom(size: 20)
//var arrayOfMax:Int = array.max() ?? 0
//var arrayOfMin:Int  = array.min() ?? 0
//var differenceArray = arrayOfMax - arrayOfMin

//print(Array.generateRandom(size: 20 + 1))
//print("Разница между max и min значениями \(differenceArray)")
/*
var m = [1,2,3,4,5,6,7,8,9,10]

var i:Int

for i in 0..<m.count{

    (m[i]) = Int((arc4random() % 20+1));

    print(m[i]);
}
var arrayOfMax:Int = m.max() ?? 0
var arrayOfMin:Int  = m.min() ?? 0
var differenceArray = arrayOfMax - arrayOfMin

print("Разница между max и min значениями \(differenceArray)")

if let str = readLine(){
    let array = str.components(separatedBy: ",").compactMap{Int($0)}
    print(array)
}
*/
//var arrays = [[2,3,5],[3,7,4]]
//var suColums = arrays[0] + arrays[1]

//var array = [0,0,0,0,0,0]
//
/*
var arrayRandomOne = (Int(arc4random() % 30+1))
var arrayRandomTwo = (Int(arc4random() % 30+1))
print("Type in size arrays:")
func DFS(rows:[Int], colums: [Int]) -> [Int]{
    var arrays = [Int]()
    for _ in rows {
        for _ in colums {
            arrays.append(arrayRandomTwo)
        }
        arrays.append(arrayRandomOne)
    }
    return arrays
}
var array = DFS(rows: [5], colums: [5])
print(array)
*/
func DFS(rows:Int, colums:Int) ->[Int]{
    var str = [Int]()
    for i in 0..<5 {
        for j in 0..<5 {
            str[j].append(Int(arc4random() % 30+1))
        }
        str[i].append(Int(arc4random() % 30+1))
    }
    print("\n\(str)")
    return str
}
var array = DFS(rows: 4, colums: 4)
/*int NUM[6] = { 0,0,0,0,0,0 };



void DFS(int v, int **matrix,int size) {

    NUM[v] = 1;
    printf("%d", v);
    
    for (int i = 0; i < size; i++) {
        
            if (matrix [v][i] == 1 && NUM[i] == 0)
            {
                DFS(i, matrix,size);
            }
    }
}




*/


